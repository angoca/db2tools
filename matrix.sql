--#SET TERMINATOR @

-- Set of procedures to deal with matrix (array of arrays) in Db2.
-- This set procedures provides the following commands:
-- * Init the matrix with a value.
-- * Get a value from the matrix.
-- * Set a value in a position of the matrix.
-- * Print the matrix in the std out.
--
-- Author: Andres Gomez
-- Version: 20220529

CREATE TYPE INTEGER_ARRAY AS INTEGER ARRAY[]@
CREATE TYPE INTEGER_MATRIX AS INTEGER_ARRAY ARRAY[]@
 
CREATE OR REPLACE FUNCTION GET_INTEGER_VALUE(
  IN X SMALLINT,
  IN Y SMALLINT,
  IN M INTEGER_MATRIX)
RETURNS INTEGER
F_GET_INTEGER_VALUE: BEGIN
  DECLARE A INTEGER_ARRAY;
  DECLARE RET INTEGER;
 
  SET A = M[X];
  SET RET = A[Y];
  RETURN RET;
END F_GET_INTEGER_VALUE
@
 
CREATE OR REPLACE PROCEDURE SET_INTEGER_VALUE(
  IN X SMALLINT,
  IN Y SMALLINT,
  INOUT M INTEGER_MATRIX,
  IN VAL INTEGER)
P_SET_INTEGER_VALUE: BEGIN
  DECLARE A INTEGER_ARRAY;
 
  SET A = M[X];
  SET A[Y] = VAL;
  SET M[X] = A;
END P_SET_INTEGER_VALUE
@
 
CREATE OR REPLACE PROCEDURE INIT_INTEGER_MATRIX(
  INOUT M INTEGER_MATRIX,
  IN X SMALLINT,
  IN Y SMALLINT,
  IN VAL INTEGER)
P_INIT_INTEGER_MATRIX: BEGIN
  DECLARE I SMALLINT DEFAULT 1;
  DECLARE J SMALLINT;
  DECLARE A INTEGER_ARRAY;
 
  WHILE (I <= X) DO
   SET A = ARRAY[];
   SET J = 1;
   WHILE (J <= Y) DO
    SET A[J] = VAL;
    SET J = J + 1;
   END WHILE;
   SET M[I] = A;
   SET I = I + 1;
  END WHILE;
END P_INIT_INTEGER_MATRIX
@
 
CREATE OR REPLACE PROCEDURE PRINT_INTEGER_MATRIX(
  INOUT M INTEGER_MATRIX)
P_PRINT_INTEGER_MATRIX: BEGIN
  DECLARE I SMALLINT DEFAULT 1;
  DECLARE J SMALLINT;
  DECLARE X SMALLINT;
  DECLARE Y SMALLINT;
  DECLARE VAL INTEGER;
  DECLARE A INTEGER_ARRAY;
 
  SET X = CARDINALITY(M);
  CALL DBMS_OUTPUT.PUT_LINE('>>>>>');
  WHILE (I <= X) DO
   SET A = M[I];
   CALL DBMS_OUTPUT.PUT('[');
   SET Y = CARDINALITY(A);
   SET J = 1;
   WHILE (J <= Y) DO
    SET VAL = A[J];
    CALL DBMS_OUTPUT.PUT(VAL);
    SET J = J + 1;
                IF (J <= Y) THEN
                CALL DBMS_OUTPUT.PUT(',');
                END IF;
   END WHILE;
   CALL DBMS_OUTPUT.PUT_LINE(']');
   SET I = I + 1;
  END WHILE;
  CALL DBMS_OUTPUT.PUT_LINE('<<<<<');
END P_PRINT_INTEGER_MATRIX
@
 
SET SERVEROUTPUT ON@
 
BEGIN
DECLARE M INTEGER_MATRIX;
DECLARE VAL INTEGER;
 CALL DBMS_OUTPUT.PUT_LINE('START');
CALL INIT_INTEGER_MATRIX(M, 1, 1, 1);
CALL PRINT_INTEGER_MATRIX(M);
CALL INIT_INTEGER_MATRIX(M, 2, 1, 2);
CALL PRINT_INTEGER_MATRIX(M);
CALL INIT_INTEGER_MATRIX(M, 1, 2, 3);
CALL PRINT_INTEGER_MATRIX(M);
CALL INIT_INTEGER_MATRIX(M, 2, 2, 4);
CALL PRINT_INTEGER_MATRIX(M);
CALL INIT_INTEGER_MATRIX(M, 5, 5, 5);
CALL PRINT_INTEGER_MATRIX(M);
 
CALL INIT_INTEGER_MATRIX(M, 5, 5, 0);
CALL SET_INTEGER_VALUE(1, 1, M, 8);
SET VAL = GET_INTEGER_VALUE(1, 1, M);
CALL DBMS_OUTPUT.PUT_LINE(VAL);
CALL PRINT_INTEGER_MATRIX(M);
END
@
 
DROP TYPE INTEGER_MATRIX@
DROP TYPE INTEGER_ARRAY@